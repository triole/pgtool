#!/bin/bash
scriptdir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

cmd="${1}"
conf="${2}"
dump="${3}"

dryrun="false"
verbose="false"
for val in "${@}"; do
  if [[ "${val}" =~ ^-+(n|dryrun)$ ]]; then
    dryrun="true"
  fi
  if [[ "${val}" =~ ^-+(v|verbose)$ ]]; then
    verbose="true"
  fi
done

rcmd() {
  if [[ ("${dryrun}" != "false" || "${verbose}" == "true") ]]; then
    echo -e "\033[0;93m${1}\033[0m"
  fi
  if [[ "${dryrun}" == "false" ]]; then
    eval "${1}"
  fi
}

display_help() {
  cat "${scriptdir}/doc/help.txt"
  echo ""
  exit 1
}
if [[ -z "${conf}" ]]; then
  display_help
fi

gk() {
  cat "${conf}" |
    grep -E "^${1}" | grep -Po "[^=]+$" | grep -Po "(?<=\").*(?=\")" |
    envsubst
}

add_arg() {
  arg="$(gk "${2}")"
  if [[ -n "${arg}" ]]; then
    pg_args+=" ${1} ${arg}"
  fi
}

# acquire and assemble settings
pg_pass="$(gk "pg_pass")"
if [[ -n "${pg_pass}" ]]; then
  export PGPASSWORD="${pg_pass}"
  pg_args+="-w"
fi

pg_args=""
add_arg "-h" "pg_host"
add_arg "-p" "pg_port"
add_arg "-U" "pg_user"
add_arg "" "pg_db"

if [[ -n $(gk "dump_dir") ]]; then
  dump_dir="$(realpath $(gk "dump_dir"))"
fi
if [[ -z "${dump_dir}" ]]; then
  dump_dir="${scriptdir}/dump"
fi
mkdir -p "${dump_dir}"

# pg functions
drop() {
  if [[ "${dryrun}" == "false" ]]; then
    echo ""
    printf "Attention: you're about to kill your database."
    read -p "Sure to continue? y/n   " inp
    if [[ "${inp}" != "y" ]]; then
      echo -e "Abort.\n"
      exit
    fi
  fi
  rcmd "dropdb ${pg_args}"
}

list() {
  rcmd "psql ${pg_args} -l -t"
}

pull() {
  target_file="${dump_dir}/$(date +%Y%m%d_%H%M%S).sql.gz"
  rcmd "mkdir -p \"${dump_dir}\""
  rcmd "pg_dump ${pg_args} | gzip >\"${target_file}\""
}

push() {
  rcmd "createdb ${pg_args}" &&
    rcmd "zcat \"${dump}\" | psql ${pg_args}"
}

# main
case "${cmd}" in
  pull) pull ;;
  push) push ;;
  drop) drop ;;
  list) list ;;
  *) display_help ;;
esac
